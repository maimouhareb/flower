// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using lab1.Models;

#nullable disable

namespace lab1.Migrations
{
    [DbContext(typeof(Datacontext))]
    [Migration("20221203201144_jrrj")]
    partial class jrrj
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("lab1.Models.proudct", b =>
                {
                    b.Property<int>("proudctId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("proudctId"), 1L, 1);

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("price")
                        .HasColumnType("float");

                    b.Property<int>("supplierId")
                        .HasColumnType("int");

                    b.HasKey("proudctId");

                    b.HasIndex("supplierId");

                    b.ToTable("proudcts");
                });

            modelBuilder.Entity("lab1.Models.Rating", b =>
                {
                    b.Property<int>("RatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RatingId"), 1L, 1);

                    b.Property<int>("Ratings")
                        .HasColumnType("int");

                    b.Property<int>("proudctsproudctId")
                        .HasColumnType("int");

                    b.HasKey("RatingId");

                    b.HasIndex("proudctsproudctId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("lab1.Models.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentId"), 1L, 1);

                    b.Property<string>("StudentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StudentId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("lab1.Models.supplier", b =>
                {
                    b.Property<int>("supplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("supplierId"), 1L, 1);

                    b.Property<string>("Supname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("supplierId");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("lab1.Models.proudct", b =>
                {
                    b.HasOne("lab1.Models.supplier", "supplier")
                        .WithMany("proudcts")
                        .HasForeignKey("supplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("supplier");
                });

            modelBuilder.Entity("lab1.Models.Rating", b =>
                {
                    b.HasOne("lab1.Models.proudct", "proudcts")
                        .WithMany("Ratings")
                        .HasForeignKey("proudctsproudctId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("proudcts");
                });

            modelBuilder.Entity("lab1.Models.proudct", b =>
                {
                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("lab1.Models.supplier", b =>
                {
                    b.Navigation("proudcts");
                });
#pragma warning restore 612, 618
        }
    }
}
